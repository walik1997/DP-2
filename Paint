#TimeComplexity - O(n)
#Space Complexity = O(n)
class Solution:
    def minCost(self, costs: list[list[int]]) -> int:
        n = len(costs)
        m = len(costs[0])
        
        if n == 0 or m == 0:
            return 0
        
        for i in range(n - 2, -1, -1):
            for j in range(m):
                if j == 0:
                    costs[i][j] += min(costs[i + 1][1], costs[i + 1][2])
                elif j == 1:
                    costs[i][j] += min(costs[i + 1][0], costs[i + 1][2])
                elif j == 2:
                    costs[i][j] += min(costs[i + 1][0], costs[i + 1][1])
        
        min_cost = float('inf')
        for j in range(m):
            if costs[0][j] < min_cost:
                min_cost = costs[0][j]
        
        return min_cost
costs = [
    [17, 2, 17],
    [16, 16, 5],
    [14, 3, 19]
]

print(Solution().minCost(costs)) 